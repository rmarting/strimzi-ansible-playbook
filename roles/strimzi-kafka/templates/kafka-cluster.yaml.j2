apiVersion: kafka.strimzi.io/v1alpha1
kind: Kafka
metadata:
  name: {{ kafka_cluster_name }}
  labels:
    app: {{ kafka_cluster_name }}
spec:
  kafka:
    config:
      # default replication factors for automatically created topics
      default.replication.factor: 3
      # The default number of log partitions per topic
      num.partitions: 10
      # Enable auto creation of topic on the server
      auto.create.topics.enable: true
      # When a producer sets acks to "all" (or "-1"), min.insync.replicas specifies the minimum number of replicas that
      # must acknowledge a write for the write to be considered successful.
      # When used together, min.insync.replicas and acks allow you to enforce greater durability guarantees. A typical
      # scenario would be to create a topic with a replication factor of 3, set min.insync.replicas to 2, and
      # produce with acks of "all". This will ensure that the producer raises an exception if a
      # majority of replicas do not receive a write.
      #min.insync.replicas: 1
      # The replication factor for the group metadata internal topics "__consumer_offsets" and "__transaction_state"
      # For anything other than development testing, a value greater than 1 is recommended for to ensure availability such as 3.
      offsets.topic.replication.factor: 3
      transaction.state.log.replication.factor: 3
      transaction.state.log.min.isr: 2
      # The minimum age of a log file to be eligible for deletion due to age. Default value: 168
      # The number of hours to keep a log file before deleting it (in hours), tertiary to log.retention.ms property
      log.retention.hours: 168
      # The default cleanup policy for segments beyond the retention window. A comma separated list of valid policies.
      # Valid policies are: "delete" and "compact". Default value: "delete"
      log.cleanup.policy: delete
      # Enable the log cleaner process to run on the server. Should be enabled if using any topics with a
      # cleanup.policy=compact including the internal offsets topic. If disabled those topics will not be compacted
      # and continually grow in size.
      log.cleaner.enable: true
      # How long are delete records retained?. Default value: 86400000 (24 hours)
      log.cleaner.delete.retention.ms: 86400000
    jvmOptions:
      "-Xms": "1g"
      "-Xmx": "1g"
    listeners:
      plain: {}
      tls: {}
    livenessProbe:
      initialDelaySeconds: 90
      timeoutSeconds: 5
    #logging:
    #  type: external
    #  name: {{ kafka_cluster_name }}-custom-kafka-config
    metrics:
      lowercaseOutputName: false
      lowercaseOutputLabelNames: false
    readinessProbe:
      initialDelaySeconds: 60
      timeoutSeconds: 5
    replicas: 3
    storage:
      type: persistent-claim
      size: 20Gi
      deleteClaim: false
    template:
      pod:
        metadata:
          labels:
            custom-strimzi-label: {{ kafka_cluster_name }}
          terminationGracePeriodSeconds: 120
  zookeeper:
    jvmOptions:
      "-Xms": "512m"
      "-Xmx": "1g"
    livenessProbe:
      initialDelaySeconds: 90
      timeoutSeconds: 5
    #logging:
    #  type: external
    #  name: {{ kafka_cluster_name }}-custom-zookeeper-config
    metrics:
      lowercaseOutputName: false
      lowercaseOutputLabelNames: false
    readinessProbe:
      initialDelaySeconds: 60
      timeoutSeconds: 5
    replicas: 3
    storage:
      type: persistent-claim
      size: 10Gi
      deleteClaim: true
  entityOperator:
    topicOperator:
      reconciliationIntervalSeconds: 60
    userOperator:
      reconciliationIntervalSeconds: 60
    tlsSidecar: {}
